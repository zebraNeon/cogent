--
-- Copyright 2016, NICTA
--
-- This software may be distributed and modified according to the terms of
-- the GNU General Public License version 2. Note that NO WARRANTY is provided.
-- See "LICENSE_GPLv2.txt" for details.
--
-- @TAG(NICTA_GPL)
--

include "common.cogent"

type GeneratorResult y r s acc = (acc, <Return r | Yield y | Stop s>)
type Generator y r s acc obsv = #{acc : acc, obsv : obsv!} -> GeneratorResult y r s acc

type ConsumerResult r s acc = (acc, <Return r | Stop s | Next >)
type Consumer y r s acc obsv = #{obj : y, acc : acc, obsv : obsv!} -> ConsumerResult r s acc

-- Return if the body (enumerator) returned a value, or Stop if generator had no more
type IterationResult acc r s = (acc, <Return r | Stop s>)

-- r = return type (what the body returns, if it wishes to exit early)
-- y = yield type  (what the generator returns `next')
-- s = stop type   (what the generator returns when it exhausts itself)
--
-- YOU MUST prove that either the generator will always give Return at some point, 
-- or that the generator will always give Stop at some point.
{-# cinline iterate #-}
{-# fnmacro iterate #-}
iterate : all (y, r, s, acc, obsv).
  #{ gen  : Generator y r s acc obsv!,
   , cons : Consumer y r s acc obsv!,
   , acc  : acc,
   , obsv : obsv! } -> IterationResult acc r s

{-# cinline iterate_do #-}
{-# fnmacro iterate_do #-}
iterate_do : all (y, r, s, acc, obsv).
  #{ init : y
   , gen  : Generator y r s acc obsv!
   , cons : Consumer y r s acc obsv!
   , acc  : acc
   , obsv : obsv! } -> IterationResult acc r s
